name: CI and CD

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # tests:
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:14-alpine
  #       env:
  #         POSTGRES_DB: help_with_child_arrangements_test
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   env:
  #     RAILS_ENV: test
  #     DATABASE_URL: "postgresql://postgres:postgres@127.0.0.1/help_with_child_arrangements_test"
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup Ruby and install gems
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #     - name: Find yarn cache location
  #       id: yarn-cache
  #       run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
  #     - name: JS package cache
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ steps.yarn-cache.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-
  #     - name: Install packages with yarn
  #       run: yarn install --frozen-lockfile
  #     - name: Precompile assets
  #       run: bin/rails assets:precompile
  #     - name: Setup test database
  #       run: bin/rails db:prepare
  #     - name: Run tests
  #       run: bundle exec rspec

  linters:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: JS package cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages with yarn
        run: yarn install --frozen-lockfile
      - name: Lint stylesheets
        run: yarn run lint
      - name: Lint Ruby files
        run: bundle exec rubocop
      - name: Security audit application code
        run: bundle exec brakeman -q

  build:
    runs-on: ubuntu-latest
    # needs: [ tests, linters ]
    needs: [ linters ]
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Assume role in Cloud Platform
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      - name: Login to container repository
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Store current date
        run: echo "BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)" >> $GITHUB_ENV

      - name: Store build tag
        run: |
          prefix="fum"
          branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          short_version=$(git rev-parse --short ${{ github.sha }})
          build_tag=$prefix-$branch-$short_version
          echo "BUILD_TAG=$build_tag" >> $GITHUB_ENV

      - name: Build
        run: |
          docker build \
          --build-arg BUILD_DATE=${{ env.BUILD_DATE }} \
          --build-arg BUILD_TAG=${{ env.BUILD_TAG }} \
          --build-arg COMMIT_ID=${{ github.sha }} \
          -t ${{ vars.ECR_URL }}:${{ github.sha }} .

      - name: Push to ECR
        run: |
          docker push ${{ vars.ECR_URL }}:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update image tag
        env:
          ECR_URL: ${{ vars.ECR_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cat config/kubernetes/dev/deployment.tpl | envsubst > config/kubernetes/dev/deployment.yaml
          cat config/kubernetes/dev/migrations.tpl | envsubst > config/kubernetes/dev/migrations.yaml
      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
      - name: Apply the updated manifest
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f config/kubernetes/dev
  deploy-staging:
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: staging
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update image tag
        env:
          ECR_URL: ${{ vars.ECR_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cat config/kubernetes/staging/deployment.tpl | envsubst > config/kubernetes/staging/deployment.yaml
          cat config/kubernetes/staging/migrations.tpl | envsubst > config/kubernetes/staging/migrations.yaml
      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
      - name: Apply the updated manifest
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f config/kubernetes/staging
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update image tag
        env:
          ECR_URL: ${{ vars.ECR_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cat config/kubernetes/production/deployment.tpl | envsubst > config/kubernetes/production/deployment.yaml
          cat config/kubernetes/production/migrations.tpl | envsubst > config/kubernetes/production/migrations.yaml
      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
      - name: Apply the updated manifest
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f config/kubernetes/production
